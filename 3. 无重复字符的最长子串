思路：
1.设置一个记录字符数量的字符哈希，char_map
2.设置一个记录当前满足条件的最长子串变量word 
3.设置两个指针都指向第一个字符串的第一个字符
4.设置最长满足条件的字串的长度result
5.第二个指针向后逐个扫描字符串中的字符，在这个过程中，使用char_map记录字符数量。如果word中没出现过该字符：对word尾部添加字符并检查result是否要更新；否则第一个指针向前移动，更新
char_map中的字符数量，知道相应的字符数量为1；更新word,将word赋值为第一个指针和第二个指针之间的子串。

代码：
var lengthOfLongestSubstring = function(s) {
let char_map = new Map();
let begin =0  ;
let word = "";
let result =0;
//let s = "pwwkew";
for(let i =0;i<s.length;i++){
  if(!char_map.has(s[i])){
     char_map.set(s[i],1);
     if(char_map.get(s[i]) == 1){
      word += s[i];
      if(result < word.length){
          result = word.length;
      }
    }
  }
  else{
   char_map.set(s[i],char_map.get(s[i])+1);
   if(char_map.get(s[i]) == 1){
      word += s[i];
      if(result < word.length){
          result = word.length;
      }
    }
   while(begin < i && char_map.get(s[i]) > 1){
          char_map.set(s[begin],char_map.get(s[begin])-1);
          begin++;
   }
   word = "";
   for(let j = begin;j<=i;j++){
           word += s[j];
   }
  }
}
return result;
};

复杂度分析：
时间复杂度：O(n)
空间复杂度：O(n)
