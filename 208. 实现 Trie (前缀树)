思路：
每个Trie结点有两个属性，一个是是否结束的标识符，一个是含有26位的数组，在其中一位的属性值是该结点下一位的Trie结点。如果一个单词结束的话就将这个单词结尾的那个单词的isEnd属性
标为true。

代码：
var Trie = function() {
     this.root = new TrieNode();
};
function TrieNode(){
    this.next = new Map();
    this.isEnd = false;
}
/**
 * Inserts a word into the trie. 
 * @param {string} word
 * @return {void}
 */
Trie.prototype.insert = function(word) {
    let node = this.root;
    for(let letter of word){
        if(!node.next.has(letter)){
            node.next.set(letter,new TrieNode());
        }
        node = node.next.get(letter);
    }
    node.isEnd = true;
};

/**
 * Returns if the word is in the trie. 
 * @param {string} word
 * @return {boolean}
 */
Trie.prototype.search = function(word) {
     let node = this.root;
     for(let letter of word){
         if(!node.next.has(letter)){
             return false;
         }
         node = node.next.get(letter);
     }
     return node.isEnd;
};

/**
 * Returns if there is any word in the trie that starts with the given prefix. 
 * @param {string} prefix
 * @return {boolean}
 */
Trie.prototype.startsWith = function(prefix) {
      let node = this.root;
      for(let letter of prefix){
          if(!node.next.has(letter)){
              return false;
          }
          node = node.next.get(letter);
      }
      return true;
};

/**
 * Your Trie object will be instantiated and called as such:
 * var obj = new Trie()
 * obj.insert(word)
 * var param_2 = obj.search(word)
 * var param_3 = obj.startsWith(prefix)
 */
 
 复杂度分析：
 向Trie树中插入键
时间复杂度：O(m)//字符串长度
空间复杂度：O(m)
在 Trie 树中查找键
时间复杂度：O(m)//字符串长度
空间复杂度：O(1)
查找 Trie 树中的键前缀
时间复杂度：O(m)//字符串长度
空间复杂度：O(1)

思路：
相邻字母用哈希表相连，如abc和abd，表示成{a: {b: {c: {isEnd: 1}, d: {isEnd: 1}}}，查找时，层层向里查找
找单词：找abc顺序a → b → c → isEnd到达末尾，abc在前缀树中
找前缀：找ab顺序a -> b，isEnd是undefined，ab在前缀树中，是别的单词的前缀

代码：

var Trie = function() {
    this.h = {}
};

Trie.prototype.insert = function(word) {
    var h = this.h
    for (var w of word) 
        !h[w] && (h[w] = {}), h = h[w]
    h.isEnd = 1;
};

Trie.prototype.s = function(word) {
    var h = this.h
    for (var w of word) {
        if (!h[w]) 
            return false;
        h = h[w]; 
    }
    return h;
}

Trie.prototype.search = function(word, h) {
    return (h = this.s(word)) && h.isEnd !== undefined;
};

Trie.prototype.startsWith = function(prefix) {
    return this.s(prefix) !== false;
};

复杂度分析：
时间复杂度：O(n)
空间复杂度：O(n)
