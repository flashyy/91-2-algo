思路：首先创建一个新结点，新结点的指针的下一位指向头结点的下一位，双指针来判断前一个指针的后继结点和下一个指针的后继结点的值是否相等，如果不相等两个结点都向后移动，
如果相等则第二个结点向后移动直到这两个指针所指的后继结点（指针指向当前结点的前一位）不相同，将前一个指针的下一位指向后一个指针的下一位，后一个结点向后移动一位。最后的结果返回新创建头结点的下一位。

var deleteDuplicates = function(head) {
    let newHead = new ListNode(-1);
    newHead.next = head;
    let pre = newHead,next = head;
    while(pre.next && next.next){
        if(pre.next.val !== next.next.val){
            pre = pre.next;
            next = next.next;
        }
        else{
            while(next && next.next && pre.next.val === next.next.val){
                next = next.next;
            }
            pre.next = next.next;
            next = next.next;
        }
    }
    return newHead.next;
};

复杂度分析：
时间复杂度：O(n)
空间复杂度：O(1)
