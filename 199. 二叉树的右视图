思路：
从二叉树的右侧观察它，将观察到的节点按照从上到下的顺序输出，就是求层次遍历二叉树每层最后一个节点。
层次遍历时，将节点与层数绑定为pair，压入队列时，将节点与层数同时压入队列，并记录每一层中出现的最后一个节点。
在层次遍历中，每一层中的最后一个节点最后遍历到，随时更新。

代码：
var rightSideView = function(root) {
   let view = [];
   let queue =[];
   if(root){
       queue.push([root,0]);
   }
   while(queue.length !== 0){
       let [node,depth] = queue.shift();
       if(depth === view.length){
           view.push(node.val);
       }
       else{
           view[depth] = node.val;
       }
       if(node.left){
           queue.push([node.left,depth+1]);
       }
       if(node.right){
           queue.push([node.right,depth+1]);
       }
   }
   return view;
};
复杂度分析：
时间复杂度：O(n)//二叉树节点的个数
空间复杂度：O(n)//二叉树的高度，最大为二叉树中节点个数
