给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。 

示例 1:
输入: amount = 5, coins = [1, 2, 5]
输出: 4
解释: 有四种方式可以凑成总金额:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1

示例 2:
输入: amount = 3, coins = [2]
输出: 0
解释: 只用面额2的硬币不能凑成总金额3。

示例 3:
输入: amount = 10, coins = [10] 
输出: 1
 
注意:你可以假设：
0 <= amount (总金额) <= 5000
1 <= coin (硬币面额) <= 5000
硬币种类不超过 500 种
结果符合 32 位符号整数

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/coin-change-2
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

思路：
设置dp数组，初始化所有的值为0，将dp[0]设置为1。遍历所有的面值，对于每个金额结果都遍历一次，dp[i]+=dp[i-coin],最后返回dp[amount]。
代码：
var change = function(amount, coins) {
   const dp = new Array(amount+1).fill(0);
   dp[0]=1;
   for(let i=0;i<coins.length;i++){
       for(let j=1;j<=amount;j++){
           if(j-coins[i]>=0){
                dp[j] +=dp[j-coins[i]];
           }
       }
       console.log(dp);
   }
   return dp[amount];
};
复杂度分析：
时间复杂度：O(n*amount)
空间复杂度：O(amount)
