思路：
寻找左边界就是收缩右边界

代码：
var solution = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
    return function(n) {
        let left = 1;
        let right = n;
        while (left <= right) {
            let mid = Math.floor((right + left) / 2);
            if (isBadVersion(mid)) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return left;
    };
};

class Solution {
public:
    int firstBadVersion(int n) {
        int l=1,r=n;
        while(l<r){
            int mid=l+(r-l)/2;
            if(isBadVersion(mid)){
                 r=mid;
            }
            else
                l=mid+1;
        }
        return l;
    }
};

复杂度分析：
时间复杂度:O(logn)
空间复杂度:O(1)
