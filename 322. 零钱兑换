给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。
你可以认为每种硬币的数量是无限的。
示例 1：
输入：coins = [1, 2, 5], amount = 11
输出：3 
解释：11 = 5 + 5 + 1
示例 2：
输入：coins = [2], amount = 3
输出：-1
示例 3：
输入：coins = [1], amount = 0
输出：0

示例 4：
输入：coins = [1], amount = 1
输出：1

示例 5：
输入：coins = [1], amount = 2
输出：2

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/coin-change
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


思路：
本来应该建立一个二维数组，记录每个结果，但是利用滚动数组的方式可以减少时间复杂度。
代码：
var coinChange = function(coins, amount) {
   const dp = new Array(amount+1).fill(-1);
   dp[0]=0;
   for(let i=1;i<=amount;i++){
       for(let j=0;j<coins.length;j++){
           if(i-coins[j]>=0&&dp[i-coins[j]]!==-1){//钱数小于
               if(dp[i]===-1||dp[i]>dp[i-coins[j]]+1){//
                   dp[i] = dp[i-coins[j]]+1;
               }
           }
       }
   }
   return dp[amount];
};


var coinChange = function(coins, amount) {
   const dp = new Array(amount+1).fill(amount+1);
   dp[0] = 0;
   for(let coin of coins){
       for(let j=coin;j<=amount;j++){
           dp[j] = Math.min(dp[j],dp[j-coin]+1);
       }
   }
       if (dp[amount] === amount + 1) {
            dp[amount] = -1;
        }
   return dp[amount];
};


复杂度分析：
时间复杂度：O(amount*n)
空间复杂度：O(amount)//创建的数组长度
