思路：
分治法

代码：
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0){
            return NULL;
        }
        if(lists.size() ==1){
            return lists[0];
        }
        if(lists.size() == 2){
            return mergeTwoLists(lists[0],lists[1]);
        }
        int mid = lists.size()/2;
        std::vector<ListNode*> sub1_lists;
        std::vector<ListNode*> sub2_lists;
        for(int i=0;i<mid;i++){
            sub1_lists.push_back(lists[i]);
        }
        for(int i=mid;i<lists.size();i++){
            sub2_lists.push_back(lists[i]);
        }
        ListNode *l1 = mergeKLists(sub1_lists);
        ListNode *l2 = mergeKLists(sub2_lists);
        return mergeTwoLists(l1,l2);
    }
private:
         ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode temp_head = ListNode(0);
        ListNode *pre_head = &temp_head;
        while(l1 && l2){            
            if(l1->val < l2->val){
                pre_head->next = l1;
                l1 = l1->next;
            }
            else{
                pre_head->next =l2;
                l2=l2->next;
            }
            pre_head = pre_head ->next;
        }
        if(l1){
            pre_head->next = l1;
        }
        else{
            pre_head->next = l2;
        }
        return temp_head.next;
    }
};
复杂度分析：
时间复杂度：O(kn * logk)
空间复杂度：O(logk)
