思路：
dp[i][j] = min(dp[i-1][j],dp[i][j-1])+grid[i][j];
代码：
var minPathSum = function(grid) {
     if(grid.length === 0){
         return 0;
     }
     let rows = grid.length,cols=grid[0].length;
     let dp = new Array(rows).fill(0).map(()=>(new Array(cols).fill(0)));
     dp[0][0] = grid[0][0];
     for(let i=1;i<cols;i++){
         dp[0][i] = dp[0][i-1]+grid[0][i];
     }
     for(let i=1;i<rows;i++){
         dp[i][0] = dp[i-1][0]+grid[i][0];
         for(let j=1;j<cols;j++){
             dp[i][j] = Math.min(dp[i][j-1],dp[i-1][j])+grid[i][j];
         }
     }
     return dp[rows-1][cols-1];
};

class Solution {
    public int minPathSum(int[][] grid) {
        if(grid.length == 0 || grid[0].length == 0){
            return 0;
        }
        int m = grid.length,n=grid[0].length;
          int[] dp = new int[n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(j==0){
                    dp[j]=dp[j];
                }
                else if(i==0){
                    dp[j]=dp[j-1];
                }
                else{
                    dp[j]=Math.min(dp[j],dp[j-1]);
                }
                dp[j] += grid[i][j];
            }
        }
        return dp[n-1];
    }
}


复杂度分析：
时间复杂度：O(grid[0].length*grid.length)
空间复杂度：O(grid[0].length*grid.length)
