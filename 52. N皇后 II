思路：
利用递归的对棋盘的每一行放置皇后，放置时，按列顺序寻找可以放置皇后的列，若可以放置皇后，将皇后放置该位置，并且更新mark标记数组，递归进行下列的皇后放置；当该次递归结束后，恢复
mark数组，并尝试下一个可能放置皇后的列。

代码：
class Solution {
public:
    int result = 0;
    int totalNQueens(int n) {
        std::vector<std::vector<int>> mark;
        //std::vector<std::string> location;
        for(int i=0;i<n;i++){
            mark.push_back((std::vector<int>()));
            for(int j=0;j<n;j++){
                mark[i].push_back(0);
            }
        }
        backtrack(0,n,mark);
        return result;
    }
private:
    void backtrack(int k,int n,std::vector<std::vector<int>> &mark){
        if(k == n){
            result++;
            return;
        }
        for(int i=0;i<n;i++){
            if(mark[k][i] == 0){
                std::vector<std::vector<int>> tempMark = mark;
                //location[k][i] = 'Q';
                putDowntheQueen(k,i,mark);
                backtrack(k+1,n,mark);
                mark = tempMark;
                //location[k][i] = '.';
            }
        }
    }

    void putDowntheQueen(int x,int y,std::vector<std::vector<int>> &mark){
        static const int dx[] = {-1,1,0,0,-1,-1,1,1};
        static const int dy[] = {0,0,-1,1,-1,1,-1,1};
        mark[x][y]= 1;
        for(int i=1;i<mark.size();i++){
            for(int j=0;j<8;j++){
                int new_x = x+ i*dx[j];
                int new_y = y+ i*dy[j];
                if(new_x>=0 && new_x<mark.size() && new_y>=0 && new_y<mark.size()){
                    mark[new_x][new_y]=1;
                }
            }
        }
    }

};

复杂度分析：
时间复杂度：O(n!)
空间复杂度：O(n)
