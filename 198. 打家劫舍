你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1：

输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2：

输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 

提示：

0 <= nums.length <= 100
0 <= nums[i] <= 400

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/house-robber
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

思路：
由于同时从相邻的两个房屋中盗取财宝就会触发警报：
a.若选择第i个房间盗取财宝，则相当于只考虑前i-1个房间中盗取财物。
b.若不选择第i-1个房间中盗取财宝，则相当于考虑当前房间盗取财物。

代码：
/**
 * @param {number[]} nums
 * @return {number}
 */
var rob = function(nums) {
    let pre2 = pre1 = 0;
    for(let i = 0;i<nums.length; i++){
        let cur = Math.max(pre2+nums[i],pre1);//i-2位置上为pre2+nums[i],该值与pre1比较
        pre2 = pre1;//i-1的位置现在变为i-2的位置
        pre1 = cur;//i-1的位置变为cur的值
    }
    return pre1;//返回i-1位置
};

复杂度分析：
时间复杂度：O(n)
空间复杂度：O(1)//使用滚动数组
