思路：
这道题目是图的BFS（多源BFS）
注意：Tree是有向的因此不需要标识是否访问过，而对于无向图而言，必须得标志是否访问过！并且为了防止某个节点多次入队，需要在其入队之前就将其设置成已访问！

首先把每个源点0入队，然后从各个0同时开始一圈一圈的向1扩散（每个1都是被离它最近的0扩散到的），扩散的时候可以设置二维数组来记录距离（即扩散的层次）并同时标记是否访问过。
对于本题的可以直接修改原数组来标记距离和标志是否访问的，这里注意先把matrix数组中1的位置设置成-1（设成最大值，100000之类，只要是个无效的距离值来标志这个位置的1没有访问就行）。

代码：
/**
 * @param {number[][]} matrix
 * @return {number[][]}
 */
var updateMatrix = function(matrix) {
    let m = matrix.length,n=matrix[0].length;
    //let visited = new Array(m).fill(0).map(()=>(new Array(n).fill(0)));
    const queue = [];
    for(let i=0;i<m;i++){
        for(let j=0;j<n;j++){
            if(matrix[i][j] === 0){
                queue.push([i,j]);
            }
            else{
               matrix[i][j] = -1;
            }
        }
    }
    const dx = [-1,1,0,0];
    const dy = [0,0,-1,1];
    while(queue.length !== 0){
        let [x,y] = queue.shift();
        for(let i=0;i<4;i++){
            let newX = dx[i] + x;
            let newY = dy[i] + y;
            if(newX>=0&&newX<m&&newY>=0&&newY<n&&matrix[newX][newY]===-1){
                matrix[newX][newY] = matrix[x][y]+1;
                queue.push([newX,newY]);
                //visited[i][j] = 1;
            } 
        }
    }
    return matrix;
};

复杂度分析：
时间复杂度：时间复杂度：O(rc)，其中 r 为矩阵行数，c 为矩阵列数，即矩阵元素个数。广度优先搜索中每个位置最多只会被加入队列一次，因此只需要 O(rc) 的时间复杂度。
空间复杂度：O(1)
