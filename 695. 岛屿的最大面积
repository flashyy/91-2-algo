给定一个包含了一些 0 和 1 的非空二维数组 grid 。
一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。
找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)

示例 1:
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
对于上面这个给定矩阵应返回 6。注意答案不应该是 11 ，因为岛屿只能包含水平或垂直的四个方向的 1 。
示例 2:
[[0,0,0,0,0,0,0,0]]
对于上面这个给定的矩阵, 返回 0。

 

注意: 给定的矩阵grid 的长度和宽度都不超过 50。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/max-area-of-island
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

思路：
从图中某个顶点出发，首先访问该顶点，然后依次从它的各个未被访问的邻接点出发深度搜索遍历图，直至图中所有和顶点有路径想通且未被访问都被访问到，若此时尚有其他顶点未被访问的顶点
都被访问到。
若此时尚有其他顶点未被访问到，则选一个未被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。
代码：
var maxAreaOfIsland = function(grid) {
    let x = grid.length, y = grid[0].length
    let max = 0
    for(let i=0;i<x;i++){
        for(let j =0;j<y;j++){
            if(grid[i][j]==1){
                max = Math.max(max,countArea(grid,i,j,x,y))
            }
        }
    }
    return max;
};
function countArea(grid,i,j,x,y){
    if(i<0 || i>=x || j<0 || j>=y || grid[i][j]==0){
        return 0;
    }     
    let cnt = 1
    grid[i][j] = 0
    cnt += countArea(grid, i+1, j, x, y);
    cnt += countArea(grid, i-1, j, x, y);
    cnt += countArea(grid, i, j+1, x, y);
    cnt += countArea(grid, i, j-1, x, y);
    return cnt;
}

/**
 * @param {number[][]} grid
 * @return {number}
 */
var maxAreaOfIsland = function(grid) {
    //let x = grid.length, y = grid[0].length;
    let max = 0
    for(let i=0;i<grid.length;i++){
        for(let j =0;j<grid[0].length;j++){
            if(grid[i][j]===1){
                max = Math.max(max,dfs(grid,i,j));
            }
        }
    }
    return max;
};
function dfs(grid,x,y){
    let dx = [-1,1,0,0];
    let dy = [0,0,-1,1];     
    let count = 1;
    grid[x][y] = 0;
    for(let i=0;i<4;i++){
        let newX = dx[i]+x;
        let newY = dy[i]+y;
        if(newX<0 || newX>=grid.length || newY<0 || newY >= grid[0].length){
            continue;
        }
        if(grid[newX][newY] === 1){
             count += dfs(grid,newX,newY);        
        }
    }
    return count;
}

复杂度分析：
时间复杂度：O(row*col)
空间复杂度：O(row*col)
