给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。
candidates 中的每个数字在每个组合中只能使用一次。
说明：
所有数字（包括目标数）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [10,1,2,7,6,1,5], target = 8,
所求解集为:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
示例 2:

输入: candidates = [2,5,2,1,2], target = 5,
所求解集为:
[
  [1,2,2],
  [5]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/combination-sum-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

思路:
这道题目是含有重复元素的数组并且解集中不能有重复的元素，说明需要剪枝，同时同一个元素不能使用两次，说明回溯时候从数组下一位开始。
代码：
var combinationSum2 = function(candidates, target) {
    let result = [];
    candidates.sort((a,b) => {return a-b;});
    //console.log(candidates);
    backtrack(candidates,target,0,[],result);
    return result;
};
function backtrack(candidates,target,i,item,result){
    if(target === 0){
        result.push([...item]);
    }
    if(target < 0){
        return;
    }
    for(let j=i;j<candidates.length;j++){
        if(candidates[j-1] === candidates[j] && j>i){//当前值candidates[j-1]元素和前一位candidates[j]相同，需要剪枝
            continue;
        }
        item.push(candidates[j]);
        backtrack(candidates,target-candidates[j],j+1,item,result);
        item.pop();
    }
}
复杂度分析：
时间复杂度：O(n * 2^n) //需要O(n)的时间将结果放入结果数组中，如果数组中所有数的和不超过target，那么2^n种组合会被枚举到。
空间复杂度：O(n) //递归树的高度
