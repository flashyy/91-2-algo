思路：
回溯的方式
代码：
/**
 * @param {number} n
 * @return {string[][]}
 */
var solveNQueens = function(n) {
    let mark = new Array(n).fill(0).map(()=>{return new Array(n).fill(0)});
    let location = new Array(n).fill(".").map(()=>{return new Array(n).fill(".")});
    let result = [];
    backtrack(0,n,location,mark,result);
    return result;
function backtrack(k,n,location,mark,result){
    if(k===n){
        console.log(location);
        result.push(reSetRes(location));
        return;
    }
    for(let i=0;i<n;i++){
        if(mark[k][i] === 0){
            let temp_mark = lastMark(mark);
            location[k][i] = "Q";
            putDowntheQueen(k,i,mark);
            backtrack(k+1,n,location,mark,result);
            mark = temp_mark;
            location[k][i] =".";
        }
    }
}
function reSetRes(location){
    return location.map((item)=>([...item].join("")));
}
function lastMark(mark){
    let n= mark.length;
    let last = new Array(n).fill(0).map(()=>(new Array(n).fill(0)));
    for(let i=0;i<n;i++){
        for(let j=0;j<n;j++){
            last[i][j]=mark[i][j];
        }
    }
    return last;
}
function putDowntheQueen(x,y,mark){
   let dx = [-1,1,0,0,-1,-1,1,1];
   let dy = [0,0,-1,1,-1,1,-1,1];
   mark[x][y] = 1;
   for(let i=1;i<mark.length;i++){
       for(let j=0;j<8;j++){
           let new_x = x+i*dx[j];
           let new_y = y+i*dy[j];
           if(new_x>=0&&new_x<mark.length && new_y>=0&&new_y<mark.length){
               mark[new_x][new_y] = 1;
           }
       }
   }
}
};


class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        std::vector<std::vector<std::string>> result;
        std::vector<std::vector<int>> mark;
        std::vector<std::string> location;
        for(int i=0;i<n;i++){
            mark.push_back((std::vector<int>()));
            for(int j=0;j<n;j++){
                mark[i].push_back(0);
            }
            location.push_back("");
            location[i].append(n,'.');
        }
        backtrack(0,n,location,mark,result);
        return result;
    }
private:
    void backtrack(int k,int n,std::vector<std::string> &location,std::vector<std::vector<int>> &mark,std::vector<std::vector<std::string>> &result){
        if(k == n){
            result.push_back(location);
            return;
        }
        for(int i=0;i<n;i++){
            if(mark[k][i] == 0){
                std::vector<std::vector<int>> tempMark = mark;
                location[k][i] = 'Q';
                putDowntheQueen(k,i,mark);
                backtrack(k+1,n,location,mark,result);
                mark = tempMark;
                location[k][i] = '.';
            }
        }
    }

    void putDowntheQueen(int x,int y,std::vector<std::vector<int>> &mark){
        static const int dx[] = {-1,1,0,0,-1,-1,1,1};
        static const int dy[] = {0,0,-1,1,-1,1,-1,1};
        mark[x][y]= 1;
        for(int i=1;i<mark.size();i++){
            for(int j=0;j<8;j++){
                int new_x = x+ i*dx[j];
                int new_y = y+ i*dy[j];
                if(new_x>=0 && new_x<mark.size() && new_y>=0 && new_y<mark.size()){
                    mark[new_x][new_y]=1;
                }
            }
        }
    }

};
复杂度分析：
时间复杂度：O(n!)
空间复杂度：O(n)//空间复杂度主要取决于递归调用层数、记录每行放置的皇后的列下标的数组以及三个集合，递归调用层数不会超过 n，数组的长度为 n，每个集合的元素个数都不会超过 n。
