题目：
给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 最多出现两次 ，返回删除后数组的新长度。
不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

说明：
为什么返回数值是整数，但输出的答案是数组呢？
请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
你可以想象内部操作如下:
// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);
// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}

示例 1：

输入：nums = [1,1,1,2,2,3]
输出：5, nums = [1,1,2,2,3]
解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。 不需要考虑数组中超出新长度后面的元素。
示例 2：

输入：nums = [0,0,1,1,1,1,2,3,3]
输出：7, nums = [0,0,1,1,2,3,3]
解释：函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。 不需要考虑数组中超出新长度后面的元素。
 

提示：

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
nums 已按升序排列


思路1：
在原地进行修改，将慢指针指向数组头部分，将慢指针指向数组的第二位，保持一个窗口，窗口的大小是1。如果这个窗口的大小小于等于1，就将
如果计数符号小于等于1的话，则将慢指针的值增加1，将慢指针的所指向的值赋给快指针。
代码：
/**
 * @param {number[]} nums
 * @return {number}
 */
var removeDuplicates = function(nums) {
     let slowP = 0,count = 0;
     for(let fastP=1;fastP<nums.length;fastP++){
         if(nums[fastP] === nums[slowP]){
            count++;
         }
         else{
             count = 0;
         }
         if(count <= 1){//已经有两个值相等了，所以对将慢指针的值增加1，将慢指针所指向的值赋给快指针。
             slowP++;
             if(nums[slowP] !== nums[fastP]){
                  nums[slowP]= nums[fastP];
             }
         }
     }
     return slowP+1;
};

var removeDuplicates = function(nums) {
    return reduceLen(nums,2);
};
function reduceLen(nums,k){
    let slowP = 0;
    for(let x of nums){
        if(slowP<k || nums[slowP-k] !== x){
            nums[slowP] = x;
            slowP++;
        }
    }
    return slowP;
}

复杂度分析：
时间复杂度：O(n)
空间复杂度：O(1)


