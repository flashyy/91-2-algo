思路：
利用dp记录到达对应坐标的位置处可以拿到最大价值的礼物。
dp[i][j] = max(dp[i-1][j],dp[i][j-1])+grid[i][j];
这道题目和64题相同。

代码：
/**
 * @param {number[][]} grid
 * @return {number}
 */
var maxValue = function(grid) {
    let m = grid.length,n=grid[0].length;
    const dp = new Array(m).fill(0).map(()=>(new Array(n).fill(0)));
    dp[0][0] = grid[0][0];
    for(let i=1;i<n;i++){
        dp[0][i] = dp[0][i-1]+grid[0][i]; 
    }
    for(let i=1;i<m;i++){
        dp[i][0] = dp[i-1][0]+grid[i][0];
        for(let j=1;j<n;j++){
            dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1])+grid[i][j];
        }
    }
    return dp[m-1][n-1];
};
复杂度分析：
时间复杂度：O(m*n)//给定数组的长和宽
空间复杂度：O(m*n)
