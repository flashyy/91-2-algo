思路：
局部翻转要设置四个指针来控制翻转，翻转链表起始点，翻转链表结束点，翻转链表起始点的前一位，翻转链表结束点的后一位。
代码：
var reverseKGroup = function(head, k) {
    let result = new ListNode(-1);
    result.next = head;    
    let pre = end = result;
    while(end.next){//翻转链表结束点的下一位不为空
        for(let i=0;i<k&&end;i++){
            end = end.next;
        }
        if(!end){//注意这个边界问题
            break;
        }
        let start = pre.next;//记录翻转的起始点
        let behind = end.next;//记录翻转结束点的下一位
        end.next = null;//将K个数与前面断开
        pre.next = reverseList(start);//将翻转过后额链表与前面相连
        start.next = behind;//翻转链表的起始点已经到结束点了
        pre = start;//将链表翻转的结束点赋给翻转链表起始点的前一位
        end = pre;//翻转链表起始点的前一位与翻转链表结束点设为相同
    }
    return result.next;
};
function reverseList(head){//翻转链表的函数
    let newHead = null;
    while(head){
        let next = head.next;
        head.next = newHead;
        newHead = head;
        head = next;
    }
    return newHead;
}

复杂度分析：
时间复杂度：O(n)，其中 n 为链表的长度。head 指针会在 O(n/k) 个结点上停留，每次停留需要进行一次 O(k)的翻转操作。
空间复杂度：O(1),我们只需要建立常数个变量
