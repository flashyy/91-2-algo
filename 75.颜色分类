//一共两次遍历，第一次将0放在数组的头部，第二次将1放在0（头部）之后成为中段。
//时间复杂度：O(n),空间复杂度:O(1)
var sortColors = function(nums) {
    let p=0;
    for(let i=0;i<nums.length;i++){
        if(nums[i] === 0){
            [nums[p],nums[i]] = [nums[i],nums[p]];
            p++;
        }
    }
    for(let i=p;i<nums.length;i++){
        if(nums[i] === 1){
            [nums[i],nums[p]] = [nums[p],nums[i]];
            p++;
        }
    }
    return nums;
};

//最后的结果是分三个部分，头部全为0，中部全为1，尾部全为2，两个指针，一个从左开始p0，一个从右开始p2，当遍历到等于0的元素时，
//将与p0元素交换，当遍历到等于2元素的时候，将与p2交换,直到遍历完全部的数组。

var sortColors = function(nums) {
    let len = nums.length;
    let p0=0,p2=len-1,i=0;
// all in part1:[0,p0)
// all in part2:[p0,i)
// all in part3:(p2,len-1]
     while(i<=p2){
         if(nums[i] === 0){
             [nums[p0],nums[i]] = [nums[i],nums[p0]];
             p0++;
             i++;
         }
         else if(nums[i] === 1){
             i++;
         }
         else{
             [nums[i],nums[p2]] = [nums[p2],nums[i]];
             p2--;
         }
     }
     return nums;
};
