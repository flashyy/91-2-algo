思路：
cost长度为n,则n个阶梯分别对应的下标是0到n-1，楼层顶部对应下标n，问题为到达下标n的最小花费。
利用动态规划求解，状态转移方程：dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2])。
代码：
var minCostClimbingStairs = function(cost) {
   const dp = new Array(cost.length+1);
   dp[0]=dp[1]=0;
   for(let i=2;i<=cost.length;i++){
       dp[i] = Math.min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2]);
   }
   return dp[cost.length];
};
复杂度分析：
时间复杂度：O(n)
空间复杂度：O(n)
