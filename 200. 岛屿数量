思路：
深度优先遍历
1.标记当前搜索位置已被搜索（标记当前位置的mark数据集为1）。
2.按照方向数组的4个方向，拓展4个新位置newX,newY.
3.若新位置不在地图范围内，则忽略。
4.如果新位置未曾到达过（mark[newX][newY]为0,且是陆地（grid[newX][newY]===“1”），继续dfs该位置。

代码：
var numIslands = function(grid) {
   let result = 0;
   let n = grid.length,m=grid[0].length;
   let mark = new Array(n).fill(0).map((item)=>{return new Array(m).fill(0)});
   for(let i=0;i<n;i++){
       for(let j=0;j<m;j++){
           if(mark[i][j] === 0 && grid[i][j] === "1"){
               dfs(mark,grid,i,j);
               result++;
           }
       }
   }
   return result;
};

function dfs(mark,grid,x,y){
    mark[x][y] = 1;
    let dx = [-1,1,0,0];
    let dy = [0,0,-1,1];
    for(let i=0;i<4;i++){
        let newX = dx[i]+x;
        let newY = dy[i]+y;
        if(newX<0 || newX >= mark.length || newY<0 || newY >= mark[newX].length){
            continue;
        }
        if(mark[newX][newY] === 0 && grid[newX][newY]==="1"){
            dfs(mark,grid,newX,newY);
        }
    }
}

bfs
/**
 * @param {character[][]} grid
 * @return {number}
 */
var numIslands = function(grid) {
   let result = 0;
   let n = grid.length,m=grid[0].length;
   let mark = new Array(n).fill(0).map(()=>{ return new Array(m).fill(0) });
   for(let i=0;i<n;i++){
       for(let j=0;j<m;j++){
           if(mark[i][j] === 0 && grid[i][j] === "1"){
               bfs(mark,grid,i,j);
               result++;
           }
       }
   }
   return result;
};
function bfs(mark,grid,x,y){
    let dx = [-1,1,0,0];
    let dy = [0,0,-1,1];    
    let Q = [];
    Q.push([x,y]);
    mark[x][y] = 1;
    while(Q.length !== 0){
      let arr = Q.shift();
     // console.log(arr);
      let x = arr[0],y = arr[1];
      for(let i=0;i<4;i++){
          let newX = dx[i]+x;
          let newY = dy[i]+y;
          if(newX<0 || newX >= mark.length || newY<0 || newY >= mark[newX].length){
              continue;
          }
          if(grid[newX][newY] === "1" && mark[newX][newY] === 0){
              Q.push([newX,newY]);
              mark[newX][newY]=1;
          }
      }
    }
}
