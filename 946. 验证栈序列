给定 pushed 和 popped 两个序列，每个序列中的 值都不重复，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 true；否则，返回 false 。

 

示例 1：

输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
输出：true
解释：我们可以按以下顺序执行：
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1
示例 2：

输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
输出：false
解释：1 不能在 2 之前弹出。
 

提示：

0 <= pushed.length == popped.length <= 1000
0 <= pushed[i], popped[i] < 1000
pushed 是 popped 的排列。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/validate-stack-sequences
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

思路：新建一个栈stack,按原来给的元素序列（pushed）将元素push入栈，每一次push一个元素，需要检查是否与队列远古三首部元素是否相同，如果相同，则弹出队首元素并且弹出栈顶元素，直到两个元素不相同结束。
最终栈如果为空说明序列合法，否则不合法。
代码：
var validateStackSequences = function(pushed, popped) {
     let stack = [];
     for(let i=0;i<pushed.length;i++){
          stack.unshift(pushed[i]);
          while(stack.length !== 0 && stack[0] === popped[0]){//此处确定栈不为空，不是stack这个东西存不存在！！！
              stack.shift();//将栈顶元素弹出
              popped.shift();//将堆头元素弹出！
          }
     }
     return stack.length === 0;
};

复杂度分析：
时间复杂度：O(n)
空间复杂度:O(n)
