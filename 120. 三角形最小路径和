思路：
1.设置一个二维数组，最优解三角形dp[][],并初始化数组元素为0，dp[i][j]代表了从底向上递推时，走到第i行第j列最优解。
2.从三角形的底面向三角形上方进行动态规划：
a动态规划边界条件：底面上最优解即为数字三角形的最后一行。
b利用i循环，从倒数第二层迭代到第一层，对于每层的各列，进行动态规划递推：第i行，第j列的最优解为dp[i][j],可到达[i,j]的两个位置的最优解dp[i+1][j],dp[i+1][j+1]:
dp[i][j] = min(dp[i+1][j],dp[i+1][j+1])+triangle[i][j];
代码：
/**
 * @param {number[][]} triangle
 * @return {number}
 */
var minimumTotal = function(triangle) {
   if(triangle.length === 0){
       return 0;
   }
   let n = triangle.length;
   const dp = new Array(n).fill(0).map(()=>(new Array(n).fill(0)));
   for(let i=0;i<dp.length;i++){
       dp[n-1][i] = triangle[dp.length-1][i];
   }
   for(let i=dp.length-2;i>=0;i--){
       for(let j=0;j<dp[i].length;j++){
           dp[i][j] = Math.min(dp[i+1][j],dp[i+1][j+1])+triangle[i][j];
       }
   }
   return dp[0][0];
};
复杂度分析：
时间复杂度：O(n^2)
空间复杂度：O(n)
