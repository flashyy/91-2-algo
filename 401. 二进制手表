思路：
在时钟和分钟的亮灯数量之和为题目所给数量
代码：
class Solution {
    public List<String> readBinaryWatch(int num) {
        List<String> res = new ArrayList<>();

        for (int i = 0; i < 12; i++) {
            for (int j = 0; j < 60; j++) {
                int cnt = Integer.bitCount(i) + Integer.bitCount(j);
                if (cnt == num) {
                    // res.add(String.format("%d:%02d", i, j));
                    StringBuilder sb = new StringBuilder();
                    sb.append(i).append(':');
                    if (j < 10) {
                        sb.append('0');
                    }
                    sb.append(j);
                    res.add(sb.toString());
                }
            }
        }

        return res;
    }
}

复杂度分析：
时间复杂度：O(12*60)
空间复杂度：O(n)

思路：
利用回溯的方式
代码：
var readBinaryWatch = function(num) {
   let result = new Array();
   backtrack(num,0,0,1,1,[],[],result);
   return result;
};
 function backtrack(num,h,m,hi,mi,hours,minutes,result){
    if(hours.length + minutes.length === num){
        if(h<12&&m<60){
            let a = m<10 ? h+":0"+m : h+":"+m;
            result.push(a);
        }
    }
    for(let i=hi;i<=8;i<<=1){
        hours.push(i);
        backtrack(num,h+i,m,i<<1,mi,hours,minutes);
        hours.pop();
    }
    for(let i=mi;i<=32;i<<=1){
        minutes.push(i);
        backtrack(num,h,m+i,16,i<<1,hours,minutes);
        minutes.pop();
    }
}
复杂度分析：
时间复杂度：O()
空间复杂度：O(h) 递归树的高度
