思路：
目标点小于中点位置，其中分三种情况，
第一,如果target<nums[mid],并且nums[left]<nums[mid],需要分析：
如果target<nums[left]<nums[mid],说明目标点在数组的后半段。
如果nums[left]<target<nums[mid],说明目标点在数组的前半段。
第二，最左侧小于中点位置，则由 target<nums[mid]<nums[left],说明目标点在数组的后半段。
第三，最左侧和中点值相等，则说明目标在数组的后半段。同上。

目标点大于中点位置，其中分为三种情况，
第一，nums[left]<nums[mid]<target,说明目标前在数组后半段。
第二，如果nums[mid]<target，并且nums[mid]<nums[left],需要分析：
如果nums[mid]<nums[left]<target,那么说明目标点在数组的后半段。
如果nums[mid]<target<nums[left]，说明目标点在数组的前半段。
如果target>nums[mid]=nums[left]，说明目标在数组的后半段。
第三，如果nums[left]=nums[mid]<target,说明目标在数组的后半段。同上。

目标点等于中点位置，说明中点位置就是正确答案。
代码：
var search = function(nums, target) {
    let left = 0, right = nums.length-1;
    while(left <= right){
        let mid = parseInt((left+right)/2);
        if(target < nums[mid]){
            if(nums[left] < nums[mid]){
                if(nums[left] <= target){
                    right = mid-1;
                }
                else{
                    left = mid+1;
                }
            }
            else if(nums[left] > nums[mid]){
                right = mid - 1;
            }
            else{
                left = mid + 1; 
            }
        }
        else if(target > nums[mid]){
            if(nums[left] < nums[mid]){
                 left = mid + 1;
            }
            else if(nums[left] > nums[mid]){
                if(nums[left] <= target){
                    right = mid - 1;  
                }
                else{
                    left = mid + 1;
                }
            }
            else{
                left = mid+1;
            }
        }
        else{
            return mid;
        }
    }
    return -1;
};

改进代码：
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var search = function(nums, target) {
    let left = 0, right = nums.length-1;
    while(left <= right){
        let mid = left + Math.floor((right-left)/2);
        if(target < nums[mid]){
            if(target<nums[left]&&nums[left]<=nums[mid]){
                left = mid+1;
            }
            else{
                right = mid-1;
            }
        }
        else if(target > nums[mid]){
            if(nums[mid]<nums[left] && nums[left]<=target){
                right = mid-1;
            }
            else{
                left = mid+1;
            }
        }
        else{
            return mid;
        }
    }
    return -1;
};

复杂度分析：
时间复杂度：O(logn) //一次查找
空间复杂度：O(1)
