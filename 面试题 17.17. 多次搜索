- 思路：

1.对smalls所有字符串建立Trie，在节点中保存是否是字符串尾部，以及在smalls数组中的位置
2.遍历big字符串，如果查找到节点为为字符串尾部，则根据索引添加到result数组中

- 代码：
 ```
   function TreeNode(val) {
     this.children = {};
     this.isword = false; //标记是否是字符串结尾
     this.index =-1;   //标记单词在数组中的位置
   }

   var Trie = function () {
     this.root = new  TreeNode();
     this.count = 0; //记录字符串的个数，用来给字符串节点标记次序
   }

   Trie.prototype.insert= function (word) {
     if (!word) return;
     let  node = this.root;
     for (let  i=0 ;i <word.length;i++){
       if (!node.children[word[i]]){
         node.children[word[i]] = new TreeNode();
       }
       node = node.children[word[i]];
     }
     node.index = this.count;
     node.isword = true;
     this.count++;
   }

   Trie.prototype.search=function (word) {
     if (!word) return false;
     let  node = this.root;
     for (let  i=0;i<word.length;i++){
       if (!node.children[word[i]]){
         node = node.children[word[i]];
       }else
       {
         return  false;
       }
     }
     return  node.isword;
   }
 
   Trie.prototype.startsWith = function(prefix) {
     if (!prefix)return  false;
     let node = this.root;
     for (let  i =0;i <prefix.length;i++){
       if (node.children[prefix[i]]){
         node = node.children[prefix[i]];
       }else
       {
         return  false;
       }
     }
     return true;
   };

   var multiSearch = function(big, smalls) {
     let  result = Array(smalls.length).fill(0).map(()=>[]); //预生成数组
     let maxLength = Math.max(...smalls.map(small=> small.length)); //计算smalls中字符串的最大长度
     let trie = new Trie(); //预建trie树
     //将smalls 字符串插入树中
     for (let i=0;i< smalls.length;i++){
       trie.insert(smalls[i]);
     }

     for (let i=0;i<big.length;i++){
       if(!trie.startsWith(big[i])) continue; //查找是否以 big[i] 开头的字符串，没有则跳过本次执行
       let str = big.slice(i,i+maxLength); 
       let  node = trie.root;
       for (let j=0;j<str.length;j++)
       {
         let  jchar = str[j];
         if (!node.children[jchar]){
           break;
         }
         node = node.children[jchar];
         if (node.isword){
           result[node.index].push(i);
         }
       }
     }
     return  result;
   };

```
复杂度分析：
时间复杂度：O(n^2)
空间复杂度：O(n)
