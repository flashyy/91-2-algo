思路：
这道题和90一样，对字母进行排序，回溯的时候进行减枝，保证访问的字母之前没有被访问过。
代码：
/**
 * @param {string} tiles
 * @return {number}
 */
var numTilePossibilities = function(tiles) {
   let wordArr = tiles.split("");
   wordArr.sort((a,b)=>(a.charCodeAt()-b.charCodeAt()));
   let result = 0;
   let visited = new Array(tiles.length).fill(0);
   backtrack(wordArr,visited,result);
   return result;
   
   function backtrack(wordArr,visited){
       for(let i=0;i<wordArr.length;i++){
           if(visited[i] === 1){
               continue;
           }
           if(wordArr[i-1]===wordArr[i]&&i>0&&visited[i-1]===0){
               continue;
           }
           visited[i] = 1;
           result++;
           backtrack(wordArr,visited);
           visited[i] = 0;
       }
       return;
   }
};

复杂度分析：
时间复杂度：O()
空间复杂度：O(n)
