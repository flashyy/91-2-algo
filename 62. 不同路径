思路：
如果只能从上侧或者右侧下来，利用二维数组dp[i][j]表示到坐标(i,j)这个格内有多少条不同路径，最终的答案是dp[m-1][n-1],推导公式是dp[i][j] = dp[i-1][j]+dp[i][j-1],dp[i-1][j]表示的是
从上面走过来的路径条数，dp[i][j-1]表示从左侧走过来的路径条数。
根据二维数组的递推公式，当前坐标的值只和左边与上面的值有关，和其他的无关，这样二维数组造成大量的空间浪费，所以我们可以把它改为一维数组。
代码：
var uniquePaths = function(m, n) {
    let dp = new Array(n).fill(1);
    for(let i=1;i<m;i++){
        for(let j=1;j<n;j++){
            dp[j] = dp[j-1]+dp[j];
        }
    }
    return dp[n-1];
};

复杂度分析：
时间复杂度：O(m*n)
空间复杂度：O(n)
