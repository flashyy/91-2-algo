思路：
法一：递归
法二：设置一个空栈，将头结点入栈，将其左结点放入栈直到左节点的左结点为空，之后依次弹出，将结点值入结果栈，之后将右节点放入栈中。
代码：
var inorderTraversal = function(root) {
    let result = [];
    var inorder = function(node){
        if(node){
            inorder(node.left);
            result.push(node.val);
            inorder(node.right);
        }
    }
    inorder(root);
    return result;
};

var inorderTraversal = function(root) {
    const stack = [];
    const res = [];
    while(stack.length || root){
        while(root){
            stack.push(root);
            root = root.left;
        }
        root = stack.pop();
        res.push(root.val);
        root = root.right;
    }
    return res;
};
复杂度分析：
时间复杂度：O(n) //其中 n 为二叉树节点的个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。
空间复杂度：O(n) //空间复杂度取决于递归的栈深度，而栈深度在二叉树为一条链的情况下会达到 O(n) 的级别。

